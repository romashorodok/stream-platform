//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var RefreshTokens = newRefreshTokensTable("public", "refresh_tokens", "")

type refreshTokensTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	PrivateKeyID postgres.ColumnString
	Plaintext    postgres.ColumnString
	CreatedAt    postgres.ColumnTimestampz
	ExpiresAt    postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RefreshTokensTable struct {
	refreshTokensTable

	EXCLUDED refreshTokensTable
}

// AS creates new RefreshTokensTable with assigned alias
func (a RefreshTokensTable) AS(alias string) *RefreshTokensTable {
	return newRefreshTokensTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RefreshTokensTable with assigned schema name
func (a RefreshTokensTable) FromSchema(schemaName string) *RefreshTokensTable {
	return newRefreshTokensTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RefreshTokensTable with assigned table prefix
func (a RefreshTokensTable) WithPrefix(prefix string) *RefreshTokensTable {
	return newRefreshTokensTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RefreshTokensTable with assigned table suffix
func (a RefreshTokensTable) WithSuffix(suffix string) *RefreshTokensTable {
	return newRefreshTokensTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRefreshTokensTable(schemaName, tableName, alias string) *RefreshTokensTable {
	return &RefreshTokensTable{
		refreshTokensTable: newRefreshTokensTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newRefreshTokensTableImpl("", "excluded", ""),
	}
}

func newRefreshTokensTableImpl(schemaName, tableName, alias string) refreshTokensTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		PrivateKeyIDColumn = postgres.StringColumn("private_key_id")
		PlaintextColumn    = postgres.StringColumn("plaintext")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		ExpiresAtColumn    = postgres.TimestampzColumn("expires_at")
		allColumns         = postgres.ColumnList{IDColumn, PrivateKeyIDColumn, PlaintextColumn, CreatedAtColumn, ExpiresAtColumn}
		mutableColumns     = postgres.ColumnList{PrivateKeyIDColumn, PlaintextColumn, CreatedAtColumn, ExpiresAtColumn}
	)

	return refreshTokensTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		PrivateKeyID: PrivateKeyIDColumn,
		Plaintext:    PlaintextColumn,
		CreatedAt:    CreatedAtColumn,
		ExpiresAt:    ExpiresAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
