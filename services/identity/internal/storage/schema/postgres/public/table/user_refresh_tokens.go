//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserRefreshTokens = newUserRefreshTokensTable("public", "user_refresh_tokens", "")

type userRefreshTokensTable struct {
	postgres.Table

	// Columns
	UserID         postgres.ColumnString
	RefreshTokenID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserRefreshTokensTable struct {
	userRefreshTokensTable

	EXCLUDED userRefreshTokensTable
}

// AS creates new UserRefreshTokensTable with assigned alias
func (a UserRefreshTokensTable) AS(alias string) *UserRefreshTokensTable {
	return newUserRefreshTokensTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserRefreshTokensTable with assigned schema name
func (a UserRefreshTokensTable) FromSchema(schemaName string) *UserRefreshTokensTable {
	return newUserRefreshTokensTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserRefreshTokensTable with assigned table prefix
func (a UserRefreshTokensTable) WithPrefix(prefix string) *UserRefreshTokensTable {
	return newUserRefreshTokensTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserRefreshTokensTable with assigned table suffix
func (a UserRefreshTokensTable) WithSuffix(suffix string) *UserRefreshTokensTable {
	return newUserRefreshTokensTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserRefreshTokensTable(schemaName, tableName, alias string) *UserRefreshTokensTable {
	return &UserRefreshTokensTable{
		userRefreshTokensTable: newUserRefreshTokensTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newUserRefreshTokensTableImpl("", "excluded", ""),
	}
}

func newUserRefreshTokensTableImpl(schemaName, tableName, alias string) userRefreshTokensTable {
	var (
		UserIDColumn         = postgres.StringColumn("user_id")
		RefreshTokenIDColumn = postgres.StringColumn("refresh_token_id")
		allColumns           = postgres.ColumnList{UserIDColumn, RefreshTokenIDColumn}
		mutableColumns       = postgres.ColumnList{UserIDColumn, RefreshTokenIDColumn}
	)

	return userRefreshTokensTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:         UserIDColumn,
		RefreshTokenID: RefreshTokenIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
