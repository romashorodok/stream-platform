//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PrivateKeys = newPrivateKeysTable("public", "private_keys", "")

type privateKeysTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnString
	JwsMessage postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PrivateKeysTable struct {
	privateKeysTable

	EXCLUDED privateKeysTable
}

// AS creates new PrivateKeysTable with assigned alias
func (a PrivateKeysTable) AS(alias string) *PrivateKeysTable {
	return newPrivateKeysTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PrivateKeysTable with assigned schema name
func (a PrivateKeysTable) FromSchema(schemaName string) *PrivateKeysTable {
	return newPrivateKeysTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PrivateKeysTable with assigned table prefix
func (a PrivateKeysTable) WithPrefix(prefix string) *PrivateKeysTable {
	return newPrivateKeysTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PrivateKeysTable with assigned table suffix
func (a PrivateKeysTable) WithSuffix(suffix string) *PrivateKeysTable {
	return newPrivateKeysTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPrivateKeysTable(schemaName, tableName, alias string) *PrivateKeysTable {
	return &PrivateKeysTable{
		privateKeysTable: newPrivateKeysTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newPrivateKeysTableImpl("", "excluded", ""),
	}
}

func newPrivateKeysTableImpl(schemaName, tableName, alias string) privateKeysTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		JwsMessageColumn = postgres.StringColumn("jws_message")
		allColumns       = postgres.ColumnList{IDColumn, JwsMessageColumn}
		mutableColumns   = postgres.ColumnList{JwsMessageColumn}
	)

	return privateKeysTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		JwsMessage: JwsMessageColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
