// Package identity provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package identity

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// ExchangeTokenResponse defines model for ExchangeTokenResponse.
type ExchangeTokenResponse struct {
	AccessToken *string `json:"accessToken,omitempty"`
}

// PublicKeyListResponse defines model for PublicKeyListResponse.
type PublicKeyListResponse struct {
	GeneratedAt *time.Time `json:"generatedAt,omitempty"`
	Keys        *[]string  `json:"keys,omitempty"`
}

// SignInRequest defines model for SignInRequest.
type SignInRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// SignInResponse defines model for SignInResponse.
type SignInResponse struct {
	ErrorResponse *ErrorResponse `json:"errorResponse,omitempty"`
}

// SignOutResponse defines model for SignOutResponse.
type SignOutResponse = map[string]interface{}

// SignUpRequest defines model for SignUpRequest.
type SignUpRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// SignUpResponse defines model for SignUpResponse.
type SignUpResponse = map[string]interface{}

// VerifyTokenRevocationResponse defines model for VerifyTokenRevocationResponse.
type VerifyTokenRevocationResponse struct {
	Revoked *bool `json:"revoked,omitempty"`
}

// IdentityServiceSignInJSONRequestBody defines body for IdentityServiceSignIn for application/json ContentType.
type IdentityServiceSignInJSONRequestBody = SignInRequest

// IdentityServiceSignUpJSONRequestBody defines body for IdentityServiceSignUp for application/json ContentType.
type IdentityServiceSignUpJSONRequestBody = SignUpRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (PUT /access-token)
	TokenServiceExchangeToken(w http.ResponseWriter, r *http.Request)

	// (GET /keys)
	PublicKeyServicePublicKeyList(w http.ResponseWriter, r *http.Request)

	// (POST /sign-in)
	IdentityServiceSignIn(w http.ResponseWriter, r *http.Request)

	// (POST /sign-out)
	IdentityServiceSignOut(w http.ResponseWriter, r *http.Request)

	// (POST /sign-up)
	IdentityServiceSignUp(w http.ResponseWriter, r *http.Request)

	// (POST /token-revocation:verify)
	TokenRevocationServiceVerifyTokenRevocation(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (PUT /access-token)
func (_ Unimplemented) TokenServiceExchangeToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /keys)
func (_ Unimplemented) PublicKeyServicePublicKeyList(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /sign-in)
func (_ Unimplemented) IdentityServiceSignIn(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /sign-out)
func (_ Unimplemented) IdentityServiceSignOut(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /sign-up)
func (_ Unimplemented) IdentityServiceSignUp(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /token-revocation:verify)
func (_ Unimplemented) TokenRevocationServiceVerifyTokenRevocation(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// TokenServiceExchangeToken operation middleware
func (siw *ServerInterfaceWrapper) TokenServiceExchangeToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TokenServiceExchangeToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PublicKeyServicePublicKeyList operation middleware
func (siw *ServerInterfaceWrapper) PublicKeyServicePublicKeyList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PublicKeyServicePublicKeyList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IdentityServiceSignIn operation middleware
func (siw *ServerInterfaceWrapper) IdentityServiceSignIn(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IdentityServiceSignIn(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IdentityServiceSignOut operation middleware
func (siw *ServerInterfaceWrapper) IdentityServiceSignOut(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IdentityServiceSignOut(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IdentityServiceSignUp operation middleware
func (siw *ServerInterfaceWrapper) IdentityServiceSignUp(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IdentityServiceSignUp(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TokenRevocationServiceVerifyTokenRevocation operation middleware
func (siw *ServerInterfaceWrapper) TokenRevocationServiceVerifyTokenRevocation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TokenRevocationServiceVerifyTokenRevocation(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/access-token", wrapper.TokenServiceExchangeToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/keys", wrapper.PublicKeyServicePublicKeyList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sign-in", wrapper.IdentityServiceSignIn)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sign-out", wrapper.IdentityServiceSignOut)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sign-up", wrapper.IdentityServiceSignUp)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/token-revocation:verify", wrapper.TokenRevocationServiceVerifyTokenRevocation)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xWTU/jPBD+K9W87zFtusstN5A4VCCB+NgL6sE408SQ2sYed4lQ/vvKTpo2aVp2Japd",
	"uCX2fD7PzHjegKulVhIlWUjewPIclyx8nhujzA1araRFf6CN0mhIYLheorUsCxdUaoQELBkhM6iqCAy+",
	"OGEwheShFZxHa0H1+IScoIrg/JXnTGZ4p55R7vfFOEdrg9Cwvx3D1+6xEPwCy0thab/hDCUaRpiekv9d",
	"KLNkBAmkjHBMYokQ9b1F8IxlUBaESzsQT6vCjGHlcHy3IpMzeYMvDi3txqWZtT+VSQPQ7PUSZUY5JCfT",
	"gXCcRSPZEt+X7RHTKkYbf/MDse4DEfuF8r/BBSTwX7yprbgprLhbVXuxuXId1gZl7vXnwc/HeiCdH2jE",
	"omy6YKU4I6EOIG5wpZ4x3TL1qFSBTA4BWkVgkTsjqLz1JNQmzpAZNKfOp9q0fbATjjdVnxNpqLwNIRfK",
	"i3IliXGPeRVBipYboX20kMBdjiOLZiU4jnIm0wJHHqMRc5SjJFGnBREUgmOTWI08hK4RVPjvWeqFqRzd",
	"NrZOr2cQwQqNrf1MJ9PJN6+hNEqmBSRwMplOTgIRlIf84npmjGk9NLQLdeJhDGHMUh+xv23cdGYReKpr",
	"+IO579PpOnmUwRDTumgyip+skpvp+W4LDA69AHIXz6sLCGcL5gr6OPe9DtxxGwRGZrtH1wUEyUO3dB7m",
	"lS95llnfEdtwwtwrxuthmeEA/O2UbnQ6U/uYFAw/D/80BWuM+5g1OFuRybGoK13ZAazXXdWo1UMd6omG",
	"ls5UWn5Yft3XreoOTjIOqyNy23uuPgWpPXK2OVX13PptUq/cUTun/zh/hbF1AH2n/wj8e33EjtrsO3+h",
	"o7YWmE/cUWEbGJt2xUpWYfHaz3FvJWusDa5rx+y6w/vhl1kddoD2tAUbxm9/wYQzRbOX2iSOC8VZkXvq",
	"toy1W2W/CKqovdp5Rrfu9sTSl2jP59WvAAAA//83GNrkRw8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
