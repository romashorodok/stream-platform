// Package stream provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package stream

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// StreamStartRequest defines model for StreamStartRequest.
type StreamStartRequest struct {
	// IngestTemplate The ingest server template. The server will take the user bytes and process them.
	IngestTemplate string `json:"ingestTemplate"`
}

// StreamStartResponse defines model for StreamStartResponse.
type StreamStartResponse struct {
	ErrorResponse *ErrorResponse `json:"errorResponse,omitempty"`

	// IngestServer The DNS of server to start ingesting user stream.
	IngestServer *string `json:"ingestServer,omitempty"`
}

// StreamStatResponse defines model for StreamStatResponse.
type StreamStatResponse = map[string]interface{}

// StreamStopResponse defines model for StreamStopResponse.
type StreamStopResponse = map[string]interface{}

// StreamingServiceStreamStartJSONRequestBody defines body for StreamingServiceStreamStart for application/json ContentType.
type StreamingServiceStreamStartJSONRequestBody = StreamStartRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /stream:start)
	StreamingServiceStreamStart(w http.ResponseWriter, r *http.Request)

	// (GET /stream:stat)
	StreamingServiceStreamStat(w http.ResponseWriter, r *http.Request)

	// (POST /stream:stop)
	StreamingServiceStreamStop(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (POST /stream:start)
func (_ Unimplemented) StreamingServiceStreamStart(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /stream:stat)
func (_ Unimplemented) StreamingServiceStreamStat(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /stream:stop)
func (_ Unimplemented) StreamingServiceStreamStop(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// StreamingServiceStreamStart operation middleware
func (siw *ServerInterfaceWrapper) StreamingServiceStreamStart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StreamingServiceStreamStart(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// StreamingServiceStreamStat operation middleware
func (siw *ServerInterfaceWrapper) StreamingServiceStreamStat(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StreamingServiceStreamStat(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// StreamingServiceStreamStop operation middleware
func (siw *ServerInterfaceWrapper) StreamingServiceStreamStop(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StreamingServiceStreamStop(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/stream:start", wrapper.StreamingServiceStreamStart)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/stream:stat", wrapper.StreamingServiceStreamStat)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/stream:stop", wrapper.StreamingServiceStreamStop)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RVPW/bPBD+K8S9L9BFsNwGXbQlaIegRVvE2QIPNHWWmEokwzslNQL994InOf5MnaHp",
	"0E4WyCPv+Tr6EYxvg3fomKB4BDI1tlo+P8bo4xVS8I4wLYToA0a2KNstEulKNngVEAogjtZV0PcZRLzr",
	"bMQSipunwnm2LvSLWzQMfQYzjqjbGevIV3jXIfFhI+sqJL7GNjSapV+JZKINbL2DAq5rVEONIoz3GBWP",
	"tROV9sbFB9s0ivV3VFyj6gijWqwYSWlXqhC9QaK01U4gg1b/+Iyu4hqK99PsBME9gCd5Pqco7gv+f8Ql",
	"FPBfvvEoHw3Kd93psxHFTMgeF+nDl5nyyyeRvKKEZ9TOumoQhQRqEuGQ9fO8dmg9W+bDL8r6DAhNFy2v",
	"ZonkIMoF6ojxvEtWjPFMhxayvAFZMwfoe9Fh6VOp8Y61SXnqsyNiJBWsQVVrVzY4slbaSEkGjTU4wnRa",
	"OiYebLlJ3wMf66rZeMv5t0vI4B4jDR2mk+nkbTrhAzodLBRwNplOziCDoLkWZvnQsxAXJA1+iP8uWAnN",
	"2hV1yW9IUe27plQmomZUDh+UdcTaGUz+7s7CYrUZBxA8UaebL8sjPLZiCkPGkfjCl6u1oOgEoQ6hsUbu",
	"yW8pwVy/HKdie2Tg+9154tihLAxBEaneTaevg2A9Pv1BRr5+Allb6q7h39Z8b2oP20qBipuKzVBAcbM7",
	"DjfzPr01uqL0Cu17CfN0eCtkAr1C+XlhDIYUvLYR/5YPPmzP+suM8OFPGLH1Ov+tRsjp9C6SHO5iM/53",
	"UJHnjTe6qZMxW9c8vf8H1/Xz/mcAAAD//4/NB1o+CQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
