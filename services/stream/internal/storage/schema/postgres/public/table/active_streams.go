//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ActiveStreams = newActiveStreamsTable("public", "active_streams", "")

type activeStreamsTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnString
	BroadcasterID postgres.ColumnString
	Username      postgres.ColumnString
	Namespace     postgres.ColumnString
	Deployment    postgres.ColumnString
	StartAt       postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ActiveStreamsTable struct {
	activeStreamsTable

	EXCLUDED activeStreamsTable
}

// AS creates new ActiveStreamsTable with assigned alias
func (a ActiveStreamsTable) AS(alias string) *ActiveStreamsTable {
	return newActiveStreamsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ActiveStreamsTable with assigned schema name
func (a ActiveStreamsTable) FromSchema(schemaName string) *ActiveStreamsTable {
	return newActiveStreamsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ActiveStreamsTable with assigned table prefix
func (a ActiveStreamsTable) WithPrefix(prefix string) *ActiveStreamsTable {
	return newActiveStreamsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ActiveStreamsTable with assigned table suffix
func (a ActiveStreamsTable) WithSuffix(suffix string) *ActiveStreamsTable {
	return newActiveStreamsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newActiveStreamsTable(schemaName, tableName, alias string) *ActiveStreamsTable {
	return &ActiveStreamsTable{
		activeStreamsTable: newActiveStreamsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newActiveStreamsTableImpl("", "excluded", ""),
	}
}

func newActiveStreamsTableImpl(schemaName, tableName, alias string) activeStreamsTable {
	var (
		IDColumn            = postgres.StringColumn("id")
		BroadcasterIDColumn = postgres.StringColumn("broadcaster_id")
		UsernameColumn      = postgres.StringColumn("username")
		NamespaceColumn     = postgres.StringColumn("namespace")
		DeploymentColumn    = postgres.StringColumn("deployment")
		StartAtColumn       = postgres.TimestampzColumn("start_at")
		allColumns          = postgres.ColumnList{IDColumn, BroadcasterIDColumn, UsernameColumn, NamespaceColumn, DeploymentColumn, StartAtColumn}
		mutableColumns      = postgres.ColumnList{BroadcasterIDColumn, UsernameColumn, NamespaceColumn, DeploymentColumn, StartAtColumn}
	)

	return activeStreamsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		BroadcasterID: BroadcasterIDColumn,
		Username:      UsernameColumn,
		Namespace:     NamespaceColumn,
		Deployment:    DeploymentColumn,
		StartAt:       StartAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
