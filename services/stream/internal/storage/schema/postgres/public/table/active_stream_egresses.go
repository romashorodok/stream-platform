//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ActiveStreamEgresses = newActiveStreamEgressesTable("public", "active_stream_egresses", "")

type activeStreamEgressesTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	ActiveStreamID postgres.ColumnString
	Type           postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ActiveStreamEgressesTable struct {
	activeStreamEgressesTable

	EXCLUDED activeStreamEgressesTable
}

// AS creates new ActiveStreamEgressesTable with assigned alias
func (a ActiveStreamEgressesTable) AS(alias string) *ActiveStreamEgressesTable {
	return newActiveStreamEgressesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ActiveStreamEgressesTable with assigned schema name
func (a ActiveStreamEgressesTable) FromSchema(schemaName string) *ActiveStreamEgressesTable {
	return newActiveStreamEgressesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ActiveStreamEgressesTable with assigned table prefix
func (a ActiveStreamEgressesTable) WithPrefix(prefix string) *ActiveStreamEgressesTable {
	return newActiveStreamEgressesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ActiveStreamEgressesTable with assigned table suffix
func (a ActiveStreamEgressesTable) WithSuffix(suffix string) *ActiveStreamEgressesTable {
	return newActiveStreamEgressesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newActiveStreamEgressesTable(schemaName, tableName, alias string) *ActiveStreamEgressesTable {
	return &ActiveStreamEgressesTable{
		activeStreamEgressesTable: newActiveStreamEgressesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                  newActiveStreamEgressesTableImpl("", "excluded", ""),
	}
}

func newActiveStreamEgressesTableImpl(schemaName, tableName, alias string) activeStreamEgressesTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		ActiveStreamIDColumn = postgres.StringColumn("active_stream_id")
		TypeColumn           = postgres.StringColumn("type")
		allColumns           = postgres.ColumnList{IDColumn, ActiveStreamIDColumn, TypeColumn}
		mutableColumns       = postgres.ColumnList{ActiveStreamIDColumn, TypeColumn}
	)

	return activeStreamEgressesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		ActiveStreamID: ActiveStreamIDColumn,
		Type:           TypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
